{
	"comment": "SKON",
	"fileTypes": [
		"skon",
		"skema"
	],
	"injections": {
		"string.regexp.block.skon": {
			"patterns": [
				{
					"include": "#interpolated_skon"
				},
				{
					"include": "#embedded_comment"
				}
			]
		}
	},
	"name": "SKON",
	"patterns": [
		{
			"begin": "\"\"\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.skon"
				}
			},
			"end": "\"\"\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.skon"
				}
			},
			"name": "string.quoted.double.heredoc.skon",
			"patterns": [
				{
					"match": "\\\\.",
					"name": "constant.character.escape.skon"
				},
				{
					"include": "#interpolated_skon"
				}
			]
		},
		{
			"begin": "/\\*",
			"captures": {
				"0": {
					"name": "punctuation.definition.comment.skon"
				}
			},
			"end": "\\*/",
			"name": "comment.block.skon",
			"patterns": [
				{
					"match": "(?<=^|\\s)@\\w*(?=\\s)",
					"name": "comment.block.documentation.skon"
				}
			]
		},
		{
			"begin": "(^[ \\t]+)?(?=//)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.skon"
				}
			},
			"end": "(?=$)",
			"patterns": [
				{
					"name": "comment.line.double-slash.skon",
					"begin": "//",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.skon"
						}
					},
					"end": "(?=$)"
				}
			]
		},
		{
			"begin": "/(?![\\s=/*+{}?])",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.skon"
				}
			},
			"end": "(/)[igmy]{0,4}(?![a-zA-Z0-9])",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.skon"
				}
			},
			"name": "string.regexp.skon",
			"patterns": [
				{
					"include": "source.js.regexp"
				}
			]
		},
		{
			"captures": {
				"1": {
					"name": "variable.other.assignment.skon"
				},
				"4": {
					"name": "punctuation.separator.key-value"
				},
				"5": {
					"name": "keyword.operator.skon"
				}
			},
			"match": "(?x)\n\t\t\t\t(?:\n\t\t\t\t\t([a-zA-Z\\$_](\\w|\\$|\\.)*)\n\t\t\t\t\t\\s*\n\t\t\t\t\t(?!\\::)\n\t\t\t\t\t((:)|((?:or|and|[-+/&%*?])?=)(?![>=]))\n\t\t\t\t\t(?!\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\\s*\\(.*\\)\n\t\t\t\t\t\t)?\n\t\t\t\t\t\t\\s*\n\t\t\t\t\t\t([=-]>)\n\t\t\t\t\t)\n\t\t\t\t)"
		},
		{
			"match": "(?x)\n\t\t\t\t\\b\n\t\t\t\t(?<!\\.|::)\n\t\t\t\t(true|on|yes)\n\t\t\t\t(?!\\s*[:=][^=])\n\t\t\t\t\\b",
			"name": "constant.language.boolean.true.skon"
		},
		{
			"match": "(?x)\n\t\t\t\t\\b\n\t\t\t\t(?<!\\.|::)\n\t\t\t\t(false|off|no)\n\t\t\t\t(?!\\s*[:=][^=])\n\t\t\t\t\\b",
			"name": "constant.language.boolean.false.skon"
		},
		{
			"match": ",",
			"name": "meta.delimiter.object.comma.skon"
		},
		{
			"match": "\\{|\\}",
			"name": "meta.brace.curly.skon"
		},
		{
			"match": "\\(|\\)",
			"name": "meta.brace.round.skon"
		},
		{
			"match": "\\[|\\]\\s*",
			"name": "meta.brace.square.skon"
		},
		{
			"include": "#double_quoted_string"
		},
		{
			"include": "#numeric"
		},
		{
			"include": "#dateTime"
		}
	],
	"repository": {
		"double_quoted_string": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.skon"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.skon"
						}
					},
					"name": "string.quoted.double.skon",
					"patterns": [
						{
							"match": "(?x)\n\t\t\t\t\t\t\t\t\\\\(\n\t\t\t\t\t\t\t\t\tx\\h{2}\n\t\t\t\t\t\t\t\t  | [0-2][0-7]{0,2}\n\t\t\t\t\t\t\t\t  | 3[0-6][0-7]\n\t\t\t\t\t\t\t\t  | 37[0-7]?\n\t\t\t\t\t\t\t\t  | [4-7][0-7]?\n\t\t\t\t\t\t\t\t  | .\n\t\t\t\t\t\t\t\t)",
							"name": "constant.character.escape.skon"
						},
						{
							"include": "#interpolated_skon"
						}
					]
				}
			]
		},
		"dateTime":{
			"patterns":[
				{
					"match": "(\\@(?:[1-9][0-9]*))|((?:[0-9]{4}\\-[0-9]{2}\\-[0-9]{2})(?:T[0-9]{2}\\:[0-9]{2}\\:[0-9]{2}(?:\\.\\d+)?(?:Z|(?:\\+|\\-)[0-9]{2}\\:[0-9]{2}))?)|([0-9]{2}\\:[0-9]{2}\\:[0-9]{2}(?:\\.\\d+)?(?:Z|(?:\\+|\\-)[0-9]{2}\\:[0-9]{2}))",
					"name": "constant.language.datetime.skon"
				}
			]
		},
		"numeric": {
			"patterns": [
				{
					"match": "(?x)\n\t\t\t\t\t\t(?<!\\$)\\b\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t(0([box])[0-9a-fA-F]+)\n\t\t\t\t\t\t  | ([0-9]+(\\.[0-9]+)?(e[+\\-]?[0-9]+)?)\n\t\t\t\t\t\t)\\b",
					"name": "constant.numeric.skon"
				}
			]
		},
		"variable_name": {
			"patterns": [
				{
					"match": "([a-zA-Z\\$_]\\w*(\\.\\w+)*)",
					"name": "variable.other.assignment."
				}
			]
		}
	},
	"scopeName": "source.skon",
	"uuid": "d6de0f26-7db9-11e6-ae22-56b6b6499611",
	"version": "https://github.com/textmate/coffee-script.tmbundle/commit/da28450cf18a73595e298535c93c8370ae06994c"
}
